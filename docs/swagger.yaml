basePath: /api
definitions:
  request.CreateTagsRequest:
    properties:
      name:
        maxLength: 200
        minLength: 1
        type: string
    required:
    - name
    type: object
  request.UserSignInRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  request.UserSignUpRequest:
    properties:
      email:
        type: string
      name:
        maxLength: 200
        minLength: 1
        type: string
      password:
        minLength: 6
        type: string
    required:
    - email
    - name
    - password
    type: object
  response.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  response.Response:
    properties:
      code:
        type: integer
      data: {}
      status:
        type: string
    type: object
host: localhost:8888
info:
  contact: {}
  description: A Keeper API in Go using Gin framework
  title: Keeper API
  version: "1.0"
paths:
  /signin:
    post:
      description: Authenticate users and create a session.
      parameters:
      - description: Signin user details
        in: body
        name: loginDetails
        required: true
        schema:
          $ref: '#/definitions/request.UserSignInRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Sign In users
      tags:
      - users
  /signup:
    post:
      description: Save users data in Db.
      parameters:
      - description: Signup users
        in: body
        name: users
        required: true
        schema:
          $ref: '#/definitions/request.UserSignUpRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      summary: SignUp users
  /tags:
    get:
      description: Return list of tags.
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get All tags.
      tags:
      - tags
    post:
      description: Save tags data in Db.
      parameters:
      - description: Create tags
        in: body
        name: tags
        required: true
        schema:
          $ref: '#/definitions/request.CreateTagsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      summary: Create tags
      tags:
      - tags
  /tags/{tagID}:
    delete:
      description: Remove tags data by id.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      summary: Delete tags
      tags:
      - tags
  /tags/{tagId}:
    get:
      description: Return the tahs whoes tagId valu mathes id.
      parameters:
      - description: update tags by id
        in: path
        name: tagId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get Single tags by id.
      tags:
      - tags
    patch:
      description: Update tags data.
      parameters:
      - description: update tags by id
        in: path
        name: tagId
        required: true
        type: string
      - description: Update tags
        in: body
        name: tags
        required: true
        schema:
          $ref: '#/definitions/request.CreateTagsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      summary: Update tags
      tags:
      - tags
swagger: "2.0"
